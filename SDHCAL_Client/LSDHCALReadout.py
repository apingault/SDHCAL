# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_LSDHCALReadout', [dirname(__file__)])
        except ImportError:
            import _LSDHCALReadout
            return _LSDHCALReadout
        if fp is not None:
            try:
                _mod = imp.load_module('_LSDHCALReadout', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _LSDHCALReadout = swig_import_helper()
    del swig_import_helper
else:
    import _LSDHCALReadout
del version_info
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

class SwigPyIterator:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LSDHCALReadout.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _LSDHCALReadout.SwigPyIterator_value(self)
    def incr(self, n = 1): return _LSDHCALReadout.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _LSDHCALReadout.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _LSDHCALReadout.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _LSDHCALReadout.SwigPyIterator_equal(self, *args)
    def copy(self): return _LSDHCALReadout.SwigPyIterator_copy(self)
    def next(self): return _LSDHCALReadout.SwigPyIterator_next(self)
    def __next__(self): return _LSDHCALReadout.SwigPyIterator___next__(self)
    def previous(self): return _LSDHCALReadout.SwigPyIterator_previous(self)
    def advance(self, *args): return _LSDHCALReadout.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _LSDHCALReadout.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _LSDHCALReadout.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _LSDHCALReadout.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _LSDHCALReadout.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _LSDHCALReadout.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _LSDHCALReadout.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _LSDHCALReadout.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class CCCClient:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CCCClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CCCClient, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _LSDHCALReadout.new_CCCClient(*args)
        try: self.this.append(this)
        except: self.this = this
    def serviceHandler(self, *args): return _LSDHCALReadout.CCCClient_serviceHandler(self, *args)
    def sendSecureCommand(self, *args): return _LSDHCALReadout.CCCClient_sendSecureCommand(self, *args)
    def answerHandler(self, *args): return _LSDHCALReadout.CCCClient_answerHandler(self, *args)
    def doRegistration(self): return _LSDHCALReadout.CCCClient_doRegistration(self)
    def doInitialise(self, *args): return _LSDHCALReadout.CCCClient_doInitialise(self, *args)
    def doConfigure(self): return _LSDHCALReadout.CCCClient_doConfigure(self)
    def doStart(self): return _LSDHCALReadout.CCCClient_doStart(self)
    def doStop(self): return _LSDHCALReadout.CCCClient_doStop(self)
    def doPause(self): return _LSDHCALReadout.CCCClient_doPause(self)
    def doResume(self): return _LSDHCALReadout.CCCClient_doResume(self)
    def doDIFReset(self): return _LSDHCALReadout.CCCClient_doDIFReset(self)
    def doCCCReset(self): return _LSDHCALReadout.CCCClient_doCCCReset(self)
    def doTestRegisterWrite(self, *args): return _LSDHCALReadout.CCCClient_doTestRegisterWrite(self, *args)
    def doTestRegisterRead(self): return _LSDHCALReadout.CCCClient_doTestRegisterRead(self)
    __swig_destroy__ = _LSDHCALReadout.delete_CCCClient
    __del__ = lambda self : None;
CCCClient_swigregister = _LSDHCALReadout.CCCClient_swigregister
CCCClient_swigregister(CCCClient)

class DIFClient:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DIFClient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DIFClient, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _LSDHCALReadout.new_DIFClient(*args)
        try: self.this.append(this)
        except: self.this = this
    def serviceHandler(self, *args): return _LSDHCALReadout.DIFClient_serviceHandler(self, *args)
    def sendSecureCommand(self, *args): return _LSDHCALReadout.DIFClient_sendSecureCommand(self, *args)
    def answerHandler(self, *args): return _LSDHCALReadout.DIFClient_answerHandler(self, *args)
    def doRegistration(self): return _LSDHCALReadout.DIFClient_doRegistration(self)
    def doScanDevices(self): return _LSDHCALReadout.DIFClient_doScanDevices(self)
    def doInitialise(self, *args): return _LSDHCALReadout.DIFClient_doInitialise(self, *args)
    def doPreConfigure(self, *args): return _LSDHCALReadout.DIFClient_doPreConfigure(self, *args)
    def doConfigureChips(self, *args): return _LSDHCALReadout.DIFClient_doConfigureChips(self, *args)
    def doConfigure(self): return _LSDHCALReadout.DIFClient_doConfigure(self)
    def doStart(self): return _LSDHCALReadout.DIFClient_doStart(self)
    def doStop(self): return _LSDHCALReadout.DIFClient_doStop(self)
    def getDIFList(self): return _LSDHCALReadout.DIFClient_getDIFList(self)
    __swig_destroy__ = _LSDHCALReadout.delete_DIFClient
    __del__ = lambda self : None;
DIFClient_swigregister = _LSDHCALReadout.DIFClient_swigregister
DIFClient_swigregister(DIFClient)

# This file is compatible with both classic and new-style classes.


