import sys,os,commands
import  os
import re
import sys

def SWIGSharedLibrary(env, library, sources, **args):
  swigre = re.compile('(.*).i')
  if env.WhereIs('swig') is None:
    sourcesbis = []
    for source in sources:
      cName = swigre.sub(r'\1_wrap.c', source)
      cppName = swigre.sub(r'\1_wrap.cc', source)
      if os.path.exists(cName):
        sourcesbis.append(cName)
      elif os.path.exists(cppName):
        sourcesbis.append(cppName)
      else:
        sourcesbis.append(source)
  else:
    sourcesbis = sources
 
  if 'SWIGFLAGS' in args:
    args['SWIGFLAGS'] += ['-python']
  else:
    args['SWIGFLAGS'] = ['-python'] + env['SWIGFLAGS']
  args['SHLIBPREFIX']=""
  if sys.version >= '2.5':
    args['SHLIBSUFFIX']=".pyd"
 
  cat=env.SharedLibrary(library, sourcesbis, **args)
  return cat
 


# environment
#import xdaq
#print xdaq.INCLUDES
#print xdaq.LIBRARY_PATHS
#print xdaq.LIBRARIES

#print "----------------------------------------------"
Decider('MD5-timestamp')
XDAQ_ROOT="/opt/xdaq"
DIM_ROOT="/usr/local/dim"
DHCAL_ROOT=os.path.abspath("..")


Bit64=False
Bit64=os.uname()[4]=='x86_64'

NetLink=DHCAL_ROOT+"/netLink"
if ( not os.path.exists(NetLink)):
  NetLink=os.getenv("HOME")+"/netLink"

kl=os.uname()[2].split(".")
platform="UBUNTU"
if (kl[len(kl)-1][0:3] == 'el5'):
    platform="SLC5"

if (kl[len(kl)-2][0:3] == 'el6'):
    platform="SLC6"

Arm=os.uname()[4]=='armv7l'

if Arm or platform=="UBUNTU":
  boostsystem='boost_system'
  boostthread='boost_thread'
else:
  boostsystem='boost_system-mt'
  boostthread='boost_thread-mt'


Use_Dim=True
#os.environ.has_key("DIM_DNS_NODE")

# includes
INCLUDES=['include',"/usr/include/boost141/",DHCAL_ROOT+"/SDHCAL_common/include",DHCAL_ROOT+"/SDHCAL_DB/include",DHCAL_ROOT+"/SDHCAL_Readout/include"]

if (Use_Dim):
  INCLUDES.append(DIM_ROOT+"/dim")
 
INCLUDES.append(commands.getoutput("python -c 'import distutils.sysconfig as conf; print conf.get_python_inc()'"))

INCLUDES.append("/usr/include/jsoncpp")
INCLUDES.append("/usr/include/libxml2")
INCLUDES.append(DHCAL_ROOT+"/SDHCAL_EventReader/include")
INCLUDES.append(os.path.join(os.getenv("LCIODIR"),"include"))
INCLUDES.append(os.path.join(os.getenv("LCIODIR"),"include","IMPL"))


CPPFLAGS=["-pthread","-O2","-DLINUX", "-DREENTRANT" ,"-Dlinux", "-DLITTLE_ENDIAN__ ", "-Dx86",  "-DXERCES=2", "-DDAQ_VERSION_2"]

#Library ROOT + some of XDAQ + DB 
ROOT_LIBS=[lib[2:] for lib in filter(lambda x: (x[:2]=="-l"), commands.getoutput("$ROOTSYS/bin/root-config --libs --ldflags --glibs").split(" "))
]
ROOT_LIBS.append('XMLIO')
ROOT_LIBPATH=[lib[2:] for lib in filter(lambda x: (x[:2]=="-L"), commands.getoutput("$ROOTSYS/bin/root-config --libs ").split(" "))]

#LIBRARIES=['pthread', 'toolbox', 'xcept', 'config', 'log4cplus', 'asyncresolv', 'uuid', 'm', 'DHCDBUtils', 'occi', 'clntsh', 'nnz11', 'ilcconfdb', 'dbi', 'ftd2xx', 'stdc++','DHCEvent','ftdi','ftdipp']
LIBRARIES=ROOT_LIBS+['pthread',  'm', 'stdc++',boostsystem,boostthread,'SDHCALcommon','SDHCALReadout','SDHCALEventReader','lcio','sio','dim','netlink','cslm','jsoncpp','log4cxx']



#Library path XDAQ,DHCAL and ROOT + Python
if (Bit64):
	LIBRARY_PATHS=ROOT_LIBPATH+["/usr/lib64","/usr/local/lib",DIM_ROOT+"/linux",DHCAL_ROOT+"/opt/dhcal/lib"]
else:
  LIBRARY_PATHS=ROOT_LIBPATH+["/usr/lib","/usr/local/lib",DIM_ROOT+"/linux",DHCAL_ROOT+"/opt/dhcal/lib"]
LIBRARY_PATHS.append(commands.getoutput("python -c 'import distutils.sysconfig as conf; print conf.PREFIX'")+"/lib")
LIBRARY_PATHS.append(os.path.join(os.getenv("LCIODIR"),"lib"))
if Use_Dim:
   CPPFLAGS.append("-DUSE_DIM")

#   INCLUDES.append("/opt/xdaq/include/dim")
#   LIBRARIES.append("dim")
#   LIBRARY_PATHS.append("/opt/xdaq/lib")


#link flags
LDFLAGS=["-fPIC","-dynamiclib"]


# SWIG
SWIGSF=["-c++","-classic"]

for i in INCLUDES:
    SWIGSF.append("-I"+i)
print SWIGSF

# Create the Environment
env = Environment(CPPPATH=INCLUDES,CPPFLAGS=CPPFLAGS,LINKFLAGS=LDFLAGS, LIBS=LIBRARIES,LIBPATH=LIBRARY_PATHS,SWIGFLAGS=SWIGSF)

#print "CC is:",env.subst('$CPPPATH')

env['BUILDERS']['PythonModule'] = SWIGSharedLibrary


# Library source
LIBRARY_SOURCES=Glob("#src/*.cc")

#Shared library
SDHCALDimCtrl=env.SharedLibrary("#lib/SDHCALDimCtrl",LIBRARY_SOURCES)



#Daemon 
EXE_LIBPATH=LIBRARY_PATHS
EXE_LIBPATH.append("#lib")
EXE_LIBS=LIBRARIES
EXE_LIBS.append("SDHCALDimCtrl")
#djc=env.Program("bin/dimjc",source="src/djc.cxx",LIBPATH=EXE_LIBPATH,LIBS=EXE_LIBS)
ddc=env.Program("bin/dimdaq",source="src/daq.cxx",LIBPATH=EXE_LIBPATH,LIBS=EXE_LIBS)
dsp=env.Program("bin/dimwriter",source="src/dimwriter.cxx",LIBPATH=EXE_LIBPATH,LIBS=EXE_LIBS)
rsp=env.Program("bin/dimrpc_writer",source="src/rpcshm.cxx",LIBPATH=EXE_LIBPATH,LIBS=EXE_LIBS)
rdc=env.Program("bin/dimrpc_difclient",source="src/rpcdc.cxx",LIBPATH=EXE_LIBPATH,LIBS=EXE_LIBS)
testdsp=env.Program("bin/testdaq",source="src/testdaq.cxx",LIBPATH=EXE_LIBPATH,LIBS=EXE_LIBS)
#dcs=env.Program("bin/dimccc",source="src/dcc.cxx",LIBPATH=EXE_LIBPATH,LIBS=EXE_LIBS)
#dzups=env.Program("bin/dimzup",source="src/dzup.cxx",LIBPATH=EXE_LIBPATH,LIBS=EXE_LIBS)

#Python module
_SDHCALDimCtrl=env.PythonModule('_LSDHCALDimCtrl', ['LSDHCALDimCtrl.i'],LIBPATH="#lib",LIBS="SDHCALDimCtrl")

myinc=[]
for x in Glob("#include/*.h"):
  myinc.append("include/"+x.name)
print myinc
env.Install(DHCAL_ROOT+"/opt/dhcal/lib",SDHCALDimCtrl)
env.Install(DHCAL_ROOT+"/opt/dhcal/bin",[ddc,dsp,rsp,rdc])
###env.Install("/opt/dhcal/lib",SDHCALDimCtrl)
###env.Install("/opt/dhcal/include/readout",myinc)

env.Alias('install', [DHCAL_ROOT+"/opt/dhcal/lib",DHCAL_ROOT+"/opt/dhcal/bin"])



